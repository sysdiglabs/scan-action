import { AcceptedRisk } from './AcceptedRisk';
import { Layer } from './Layer';
import { Package } from './Package';
import { Severity } from './Severity';

export class Vulnerability {
  private readonly foundInPackages: Set<Package> = new Set();
  private readonly acceptedRisks: Set<AcceptedRisk> = new Set();

  constructor(
    public readonly cve: string,
    public readonly severity: Severity,
    public readonly cvssScore: number,
    public readonly disclosureDate: Date,
    public readonly solutionDate: Date | null,
    public readonly exploitable: boolean,
    public readonly fixVersion: string | null
  ) {}

  isFixable(): boolean {
    return this.fixVersion !== null;
  }

  addFoundInPackage(pkg: Package) {
    if (!this.foundInPackages.has(pkg)) {
      this.foundInPackages.add(pkg);
      pkg.addVulnerability(this);
    }
  }

  getFoundInPackages(): Package[] {
    return Array.from(this.foundInPackages);
  }

  getFoundInLayers(): Layer[] {
    const layers = new Set<Layer>();
    for (const pkg of this.foundInPackages) {
      layers.add(pkg.foundInLayer);
    }
    return Array.from(layers);
  }

  addAcceptedRisk(risk: AcceptedRisk) {
    if (!this.acceptedRisks.has(risk)) {
      this.acceptedRisks.add(risk);
      risk.addForVulnerability(this);
    }
  }

  getAcceptedRisks(): AcceptedRisk[] {
    return Array.from(this.acceptedRisks);
  }
}
