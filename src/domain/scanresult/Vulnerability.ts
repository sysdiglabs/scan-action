import { AcceptedRisk } from './AcceptedRisk';
import { Layer } from './Layer';
import { Package } from './Package';
import { Severity } from './Severity';

export class Vulnerability {
  private readonly foundInPackages: WeakSet<Package> = new WeakSet();
  private readonly acceptedRisks: WeakSet<AcceptedRisk> = new WeakSet();

  constructor(
    public readonly cve: string,
    public readonly severity: Severity,
    public readonly disclosureDate: Date,
    public readonly solutionDate: Date | null,
    public readonly exploitable: boolean,
    public readonly fixVersion: string | null
  ) {}

  isFixable(): boolean {
    return this.fixVersion !== null;
  }

  addFoundInPackage(pkg: Package) {
    if (!this.foundInPackages.has(pkg)) {
      this.foundInPackages.add(pkg);
      pkg.addVulnerability(this);
    }
  }

  getFoundInPackages(): Package[] {
    // This is tricky because WeakSet is not iterable.
    // This is a limitation of JavaScript's WeakSet.
    // The relationship should be managed from the Package side.
    throw new Error('WeakSet is not iterable. Cannot get packages from vulnerability.');
  }

  getFoundInLayers(): Layer[] {
    // This is tricky because WeakSet is not iterable.
    // This is a limitation of JavaScript's WeakSet.
    // The relationship should be managed from the Package side.
    throw new Error('WeakSet is not iterable. Cannot get layers from vulnerability.');
  }

  addAcceptedRisk(risk: AcceptedRisk) {
    if (!this.acceptedRisks.has(risk)) {
      this.acceptedRisks.add(risk);
      risk.addForVulnerability(this);
    }
  }
}
